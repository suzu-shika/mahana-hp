---
import Layout from '../../layouts/Layout.astro';
import HeadingTitle from '../../components/Title/HeadingTitle.astro';
import Button from '../../components/Button.astro';
import SingleSidebar from '../../components/Single/SingleSidebar.astro';
import Contact from '../../components/Contact.astro';

// microCMS呼び出し
import { getBlogs, getBlogDetail } from "../../library/microcms";

// HTMLパーサー用ライブラリ
import { parse } from 'node-html-parser';

// 詳細記事ページの全パスを取得
export async function getStaticPaths() {
  const response = await getBlogs({ fields: ["id"], limit: 100 });
  return response.contents.map((content: any) => ({
    params: {
      blogId: content.id,
    },
  }));
}

// 記事の詳細情報を取得
const { blogId } = Astro.params;
const blog = await getBlogDetail(blogId as string);

// 全ブログ記事を取得
const allBlogs = await getBlogs({ fields: ["id", "title", "thumbnail", "thumbnail_alt"], limit: 100 });

// 現在の記事の前後を特定
const blogIndex = allBlogs.contents.findIndex((item: any) => item.id === blogId);
const prevBlog = blogIndex > 0 ? allBlogs.contents[blogIndex - 1] : null;
const nextBlog = blogIndex < allBlogs.contents.length - 1 ? allBlogs.contents[blogIndex + 1] : null;

// サニタイズ処理
import sanitizeHtml from 'sanitize-html';

// リッチエディタ内の画像URLに画像APIクエリを付与
function convertImagesToWebP(htmlContent: string) {
  const root = parse(htmlContent);
  root.querySelectorAll('img').forEach(img => {
    const src = img.getAttribute('src');
    if (src && src.includes('microcms-assets.io')) {
      img.setAttribute('src', `${src}?fm=webp`);
    }
  });
  return root.toString();
}

// 記事本文をサニタイズし、画像をWebPに変換
const cleanContent = sanitizeHtml(convertImagesToWebP(blog.main_text), {
  allowedTags: [ 'b', 'i', 'em', 'strong', 'a', 'p', 'h1', 'h2', 'h3', 'ul', 'ol', 'li', 'br', 'img' ],
  allowedAttributes: {
    '*': ['class', 'style'],
    'a': ['href', 'target'],
    'img': ['src', 'alt', 'width', 'height']
  },
  allowedIframeHostnames: ['www.youtube.com'],
});

// 記事本文をプレーンテキスト化
const cleanText = sanitizeHtml(blog.main_text, {
  allowedTags: [], // すべてのタグを削除
  allowedAttributes: {} // すべての属性を削除
}).trim();

// メタディスクリプション：記事本文の最初の150文字を動的に出力
const metaDescription = cleanText.length > 150 ? cleanText.substring(0, 150) + "…" : cleanText;
---

<Layout subTitle={blog.title}
  ogType="article"
  description={metaDescription}
>
  <div class="single-heading">
    <HeadingTitle
      titleText="Blog"
      ariaLabel="ブログ"
      className="c-heading-title--camel"
    />
  </div>
  <div class="single-container">
    <main class="single-main">
      <article class="single-article">
        <div class="single-head">
          <div class="single-head-upper">
            <h1 class="single-title">{blog.title}</h1>
            <span class="single-category u-uppercase">{blog.category}</span>
          </div>
          <time class="single-date" datetime={blog.publishedAt}>
            {new Date(blog.publishedAt).toLocaleDateString('ja-JP', {
              year: 'numeric',
              month: '2-digit',
              day: '2-digit'
            })}
          </time>
        </div>
        <div class="single-thumbnail">
          <img
            src={`${blog.thumbnail.url}?fm=webp`}
            alt={blog.thumbnail_alt || "ブログのサムネイル画像"}
            loading="eager"
            decoding="async"
            width="240"
            height="156"
          />
        </div>
        <div class="single-content" set:html={cleanContent}></div>
      </article>

      <ul class="single-pagination-list">
        {prevBlog && (
          <li class="single-pagination-item single-pagination-item--left">
            <a href={`/blog/${prevBlog.id}`}>
              <span class="single-pagination-text single-pagination-text--prev">前の記事を見る</span>
              <div class="single-pagination-card">
                <div class="c-single-card">
                  <div class="c-single-card-image">
                    <img
                      src={prevBlog.thumbnail ? `${prevBlog.thumbnail.url}?fm=webp` : "/assets/images/blog/default-thumbnail.webp"}
                      alt={prevBlog.thumbnail_alt || "ブログのサムネイル画像"}
                      loading="lazy"
                      decoding="async"
                      width="240"
                      height="156"
                    />
                  </div>
                  <h2 class="c-single-card-title">{prevBlog.title}</h2>
                </div>
              </div>
            </a>
          </li>
        )}
      </ul>

      <div class="single-button">
        <Button
          buttonUrl="/blog/1"
          buttonText="ブログ一覧を見る"
          buttonAriaLabel=""
        />
      </div>
    </main>
    <SingleSidebar />
  </div>
  <Contact />
</Layout>

<style lang="scss" is:global>
  @use '../../styles/breakpoints' as *;

  .single-container {
    width: calc(350 var(--vw-sp));
    margin: auto;
    text-align: justify;
  }

  .single-main {
    padding-bottom: 80px;
  }

  .single-article {
    padding: calc(20 var(--vw-sp)) calc(25 var(--vw-sp)) 40px;
    background-color: var(--color-white);
  }

  .single-head-upper {
    display: flex;
    flex-direction: column-reverse;
    gap: 20px;
  }

  .single-title {
    color: var(--color-camel);
    font-size: 16px;
    font-weight: 600;
  }

  .single-category {
    display: grid;
    width: fit-content;
    place-items: center;
    height: 20px;
    padding: 0 20px 1px;
    background-color: var(--color-main);
    color: var(--color-base);
    font-size: 12px;
  }

  .single-date {
    display: block;
    margin-top: 10px;
    font-size: 12px;
    text-align: right;
  }

  .single-thumbnail {
    margin-top: 10px;;

    img {
      object-fit: cover;
      width: 100%;
      height: auto;
      aspect-ratio: 616 / 400;
    }
  }

  .single-button {
    margin-top: 32px;
    text-align: center;
  }

  @include mq() {
    .single-container {
      width: 100%;
      max-width: calc(var(--width-content) + 80px * 2);
      padding: 0 80px;
    }
  }

  @media screen and (min-width: 1080px) {
    .single-container {
      display: flex;
      gap: min(60px, calc(60 var(--vw-pc)));
    }

    .single-main {
      flex: 1 1 auto;
      padding-bottom: 160px;
    }

    .single-article {
      padding: 40px 42px 80px;
    }

    .single-head-upper {
      gap: 10px;
    }

    .single-title {
      font-size: 20px;
    }

    .single-thumbnail {
      margin-top: 20px;

      img {
        object-fit: cover;
      }
    }

    .single-button {
      margin-top: 40px;
    }
  }

  .single-content {
    margin-top: 40px;
  }

  @include mq() {
  .single-content {
    margin-top: 80px;
    }
  }

  .single-pagination-list {
    display: flex;
    padding: 0 calc(25 var(--vw-sp));
    margin-top: 32px;
  }

  .single-pagination-item {
    &--right {
      margin-left: auto;
    }

    a {
      display: block;
      padding: 8px 0;
      font-size: 14px;
      text-decoration: underline;
      text-underline-offset: 5px;
    }
  }

  .single-pagination-card {
    display: none;
  }

  @include mq() {
    .single-pagination-list {
      padding: 0;
      margin-top: 40px;
    }

    .single-pagination-item {
      a {
        position: relative;
        padding: 18px 0 13px;
        border-top: 1px solid;
        border-bottom: 1px solid;
        text-decoration: none;
      }

      &--left {
        a {
          padding-right: 9px;
          border-right: 1px solid;
        }
      }

      &--right {
        a {
          padding-left: 9px;
          border-left: 1px solid;
        }
      }
    }

    .single-pagination-text {
      position: absolute;
      top: -11px;
      display: block;
      background-color: var(--color-base);

      &--prev {
        left: 0;
        padding-right: 12px;
      }

      &--next {
        right: 0;
        padding-left: 12px;
      }
    }

    .single-pagination-card {
      display: block;
    }
  }

  .c-single-card {
    display: flex;
    gap: 10px;
    width: 240px;
  }

  .c-single-card-image {
    flex: 0 0 80px;

    img {
      object-fit: cover;
      width: 100%;
      height: auto;
      aspect-ratio: 80 / 52;
    }
  }

  .c-single-card-image-inner {
    position: relative;
  }

  .c-single-card-number {
    position: absolute;
    top: 0;
    left: 0;
    display: grid;
    place-items: center;
    width: 20px;
    height: 20px;
    background-color: var(--color-camel);
    color: var(--color-base);
    font-size: 12px;
    font-weight: 500;
  }

  .c-single-card-title {
    font-size: 12px;
    font-weight: 500;
  }

  // hover
  .single-pagination-list,
  .single-sidebar-latest, {
    a {
      .c-single-card-image {
        overflow: hidden;
      }

      img {
        transition: transform 0.4s;
      }

      &:hover {
        img {
          transform: scale(1.05);
        }
      }
    }
  }

  .single-sidebar-pickup {
    a {
      .c-single-card-image {
        overflow: hidden;
      }

      .c-single-card-image-inner {
        transition: transform 0.4s;
      }
    }

    a:hover {
      .c-single-card-image-inner {
        transform: scale(1.05);
      }
    }
  }
</style>
